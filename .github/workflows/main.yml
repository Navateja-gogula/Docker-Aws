name: Multi-Environment Deployment

on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build-and-deploy:
    name: Build, Push, and Deploy to AWS ECS
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
          cache-dependency-path: package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm test

      - name: Build the app
        run: npm run build --verbose

      - name: Log in to Docker Hub
        run: |
          for i in {1..3}; do
            echo "üîÑ Attempt $i to log in to Docker..."
            echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin && break
            sleep 5
          done

      - name: Build Docker Image
        run: docker build -t ${{ secrets.DOCKER_USERNAME }}/todo-app:latest .

      - name: Push Docker Image
        run: docker push ${{ secrets.DOCKER_USERNAME }}/todo-app:latest

      - name: Log out from Docker Hub
        run: docker logout

  deploy:
    name: Deploy to AWS ECS
    runs-on: ubuntu-latest
    needs: build-and-deploy

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1  # Update to match your AWS region

      - name: Ensure ECS Cluster Exists
        run: |
          echo "üîç Checking ECS cluster..."
          CLUSTER_STATUS=$(aws ecs describe-clusters --clusters my-ecs-cluster --query "clusters[*].status" --output text 2>/dev/null || echo "MISSING")
          if [ "$CLUSTER_STATUS" != "ACTIVE" ]; then
            echo "üöÄ Creating ECS cluster..."
            aws ecs create-cluster --cluster-name my-ecs-cluster
          else
            echo "‚úÖ ECS cluster exists."
          fi

      - name: Ensure ECS Task Definition File Exists
        run: |
          if [ ! -f "${{ github.workspace }}/ecs-task-definition.json" ]; then
            echo "‚ùå ERROR: ecs-task-definition.json not found!"
            exit 1
          fi

      - name: Register New ECS Task Definition
        id: register-task-def
        run: |
          echo "üöÄ Registering new ECS task definition..."
          TASK_DEF_ARN=$(aws ecs register-task-definition \
            --cli-input-json file://${{ github.workspace }}/ecs-task-definition.json \
            --query "taskDefinition.taskDefinitionArn" --output text)

          if [ -z "$TASK_DEF_ARN" ]; then
            echo "‚ùå ERROR: Failed to register task definition."
            exit 1
          fi

          echo "‚úÖ Registered Task Definition: $TASK_DEF_ARN"
          echo "TASK_DEF_ARN=$TASK_DEF_ARN" >> $GITHUB_ENV

      - name: Ensure ECS Service Exists
        run: |
          SERVICE_STATUS=$(aws ecs describe-services --cluster my-ecs-cluster --services my-ecs-service --query "services[*].status" --output text 2>/dev/null || echo "MISSING")

          if [ "$SERVICE_STATUS" = "MISSING" ]; then
            echo "üöÄ Creating ECS service..."
            aws ecs create-service \
              --cluster my-ecs-cluster \
              --service-name my-ecs-service \
              --task-definition $TASK_DEF_ARN \
              --desired-count 1 \
              --launch-type FARGATE \
              --platform-version LATEST \
              --network-configuration 'awsvpcConfiguration={subnets=["subnet-abc123"],securityGroups=["sg-xyz789"],assignPublicIp="ENABLED"}' \
              --load-balancers "targetGroupArn=arn:aws:elasticloadbalancing:us-east-1:***:targetgroup/my-target-group/abc123,containerName=todo-app,containerPort=80"
          else
            echo "‚úÖ ECS service already exists."
          fi

      - name: Deploy New Task Definition to ECS
        run: |
          echo "üöÄ Updating ECS Service to use new task definition..."
          aws ecs update-service --cluster my-ecs-cluster --service my-ecs-service --task-definition $TASK_DEF_ARN

          if [ $? -ne 0 ]; then
            echo "‚ùå ERROR: ECS update-service failed!"
            exit 1
          else
            echo "‚úÖ Service updated successfully!"
          fi

      - name: Wait for Service to Stabilize
        run: |
          echo "‚è≥ Waiting for ECS service to stabilize..."
          aws ecs wait services-stable --cluster my-ecs-cluster --services my-ecs-service

name: Multi-Environment Deployment

on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build-and-deploy:
    name: Build, Test, and Deploy to AWS EC2
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Set up Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
          cache-dependency-path: package-lock.json

      # Step 3: Install dependencies
      - name: Install dependencies
        run: npm ci

      # Step 4: Run tests
      - name: Run tests
        run: npm test

      # Step 5: Build the app
      - name: Build the app
        run: npm run build --verbose

      # Step 6: Log in to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Step 7: Build Docker Image
      - name: Build Docker Image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/todo-app:latest .

      # Step 8: Push Docker Image to Docker Hub
      - name: Push Docker Image
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/todo-app:latest

      # Step 9: Connect to AWS and set up EC2
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      # Step 10: Check for existing EC2 instance, create if needed
      - name: Check and create EC2 instance if not exists
        run: |
          INSTANCE_ID=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=todo-app" "Name=instance-state-name,Values=running" --query "Reservations[].Instances[].InstanceId" --output text)
          if [ -z "$INSTANCE_ID" ]; then
            echo "EC2 instance not found, creating..."
            INSTANCE_ID=$(aws ec2 run-instances --image-id ami-00bb6a80f01f03502 --count 1 --instance-type t2.micro --key-name my-key --security-groups my-security-group --tag-specifications 'ResourceType=instance,Tags=[{Key=Name,Value=todo-app}]' --query 'Instances[0].InstanceId' --output text)
            echo "Waiting for instance to be running..."
            aws ec2 wait instance-running --instance-ids $INSTANCE_ID
          else
            echo "EC2 instance is already running."
          fi
          PUBLIC_IP=$(aws ec2 describe-instances --instance-ids $INSTANCE_ID --query "Reservations[].Instances[].PublicIpAddress" --output text)
          echo "EC2 Instance Public IP: $PUBLIC_IP"
          echo "PUBLIC_IP=$PUBLIC_IP" >> $GITHUB_ENV

      # Step 11: Deploy to AWS EC2 and Install Docker if Missing
      - name: Deploy and Run Docker Container
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.PUBLIC_IP }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            if ! command -v docker &> /dev/null
            then
                echo "Docker not found, installing..."
                sudo apt update
                sudo apt install -y docker.io
                sudo systemctl start docker
                sudo systemctl enable docker
            else
                echo "Docker is already installed."
            fi

            docker stop todo-app || true
            docker rm todo-app || true
            docker pull ${{ secrets.DOCKER_USERNAME }}/todo-app:latest
            docker run -d -p 80:80 --name todo-app ${{ secrets.DOCKER_USERNAME }}/todo-app:latest

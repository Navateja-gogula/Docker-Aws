name: Multi-Environment Deployment

on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build-and-deploy:
    name: Build, Push, and Deploy to AWS ECS
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Ensure all files are fetched

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
          cache-dependency-path: package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm test

      - name: Build the app
        run: npm run build --verbose

      - name: Debug - List all project files
        run: ls -alh ${{ github.workspace }}

      - name: Log in to Docker Hub
        run: |
          for i in {1..3}; do
            echo "üîÑ Attempt $i to log in to Docker..."
            echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin && break
            sleep 5
          done

      - name: Build Docker Image
        run: docker build -t ${{ secrets.DOCKER_USERNAME }}/todo-app:latest .

      - name: Push Docker Image
        run: docker push ${{ secrets.DOCKER_USERNAME }}/todo-app:latest

      - name: Log out from Docker Hub
        run: docker logout

  deploy:
    name: Deploy to AWS ECS
    runs-on: ubuntu-latest
    needs: build-and-deploy

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1  # Update to match your AWS region

      - name: Debug - Ensure ECS Task Definition File Exists
        run: |
          echo "üìÇ Checking if ecs-task-definition.json exists..."
          ls -alh ${{ github.workspace }}/ecs-task-definition.json || { echo "‚ùå ERROR: Task definition file not found!"; exit 1; }

      - name: Update ECS Task Definition
        id: update-task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ github.workspace }}/ecs-task-definition.json
          container-name: todo-app
          image: ${{ secrets.DOCKER_USERNAME }}/todo-app:latest

      - name: Deploy to ECS Service
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.update-task-def.outputs.task-definition }}
          service: my-ecs-service
          cluster: my-ecs-cluster
          wait-for-service-stability: true
